/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Click And Dossard API V2
 * Documentation de l'API Click And Dossard API description
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Club
 */
export interface Club {
    /**
     * 
     * @type {number}
     * @memberof Club
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Club
     */
    shortName: string;
    /**
     * 
     * @type {string}
     * @memberof Club
     */
    dept: string;
    /**
     * 
     * @type {string}
     * @memberof Club
     */
    longName: string;
}

/**
 * 
 * @export
 * @interface Competition
 */
export interface Competition {
    /**
     * 
     * @type {number}
     * @memberof Competition
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof Competition
     */
    eventDate: Date;
    /**
     * 
     * @type {Club}
     * @memberof Competition
     */
    club: Club;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    zipCode: string;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    info?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Competition
     */
    categories: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    observations?: string;
    /**
     * 
     * @type {any}
     * @memberof Competition
     */
    pricing?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof Competition
     */
    races?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    fede: string;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    competitionType?: string;
}

/**
 * 
 * @export
 * @interface CompetitionReorganize
 */
export interface CompetitionReorganize {
    /**
     * 
     * @type {number}
     * @memberof CompetitionReorganize
     */
    competitionId?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompetitionReorganize
     */
    races?: Array<string>;
}

/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    value?: string;
}

/**
 * 
 * @export
 * @interface Licence
 */
export interface Licence {
    /**
     * 
     * @type {number}
     * @memberof Licence
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    licenceNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    gender: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    club: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    dept: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    birthYear: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    catea: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    catev: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    fede: string;
}

/**
 * 
 * @export
 * @interface LicencesPage
 */
export interface LicencesPage {
    /**
     * 
     * @type {Array<Licence>}
     * @memberof LicencesPage
     */
    data?: Array<Licence>;
    /**
     * 
     * @type {number}
     * @memberof LicencesPage
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof LicencesPage
     */
    totalCount?: number;
}

/**
 * 
 * @export
 * @interface RaceCreate
 */
export interface RaceCreate {
    /**
     * 
     * @type {number}
     * @memberof RaceCreate
     */
    competitionId?: number;
    /**
     * 
     * @type {number}
     * @memberof RaceCreate
     */
    licenceId?: number;
    /**
     * 
     * @type {number}
     * @memberof RaceCreate
     */
    riderNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceCreate
     */
    raceCode?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceCreate
     */
    catev?: string;
}

/**
 * 
 * @export
 * @interface RaceRow
 */
export interface RaceRow {
    /**
     * 
     * @type {number}
     * @memberof RaceRow
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    raceCode?: string;
    /**
     * 
     * @type {number}
     * @memberof RaceRow
     */
    riderNumber?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RaceRow
     */
    surclassed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    licenceNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    club?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    catev?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    catea?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    fede?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    gender?: string;
    /**
     * 
     * @type {number}
     * @memberof RaceRow
     */
    rankingScratch?: number;
}

/**
 * 
 * @export
 * @interface Search
 */
export interface Search {
    /**
     * 
     * @type {number}
     * @memberof Search
     */
    currentPage?: number;
    /**
     * 
     * @type {number}
     * @memberof Search
     */
    pageSize?: number;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    orderDirection?: string;
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    orderBy?: string;
    /**
     * 
     * @type {Array<Filter>}
     * @memberof Search
     */
    filters?: Array<Filter>;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
}


/**
 * CompetitionAPIApi - fetch parameter creator
 * @export
 */
export const CompetitionAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Recherche d'une épreuve par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/api/competition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Rechercher Toutes les compétitions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCompetitions(options: any = {}): FetchArgs {
            const localVarPath = `/api/competition`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Réorganisation des courses
         * @param {CompetitionReorganize} competitionReorganize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorganize(competitionReorganize: CompetitionReorganize, options: any = {}): FetchArgs {
            // verify required parameter 'competitionReorganize' is not null or undefined
            if (competitionReorganize === null || competitionReorganize === undefined) {
                throw new RequiredError('competitionReorganize','Required parameter competitionReorganize was null or undefined when calling reorganize.');
            }
            const localVarPath = `/api/competition/reorganize`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CompetitionReorganize" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(competitionReorganize || {}) : (competitionReorganize || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetitionAPIApi - functional programming interface
 * @export
 */
export const CompetitionAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Recherche d'une épreuve par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Competition> {
            const localVarFetchArgs = CompetitionAPIApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Rechercher Toutes les compétitions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCompetitions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Competition>> {
            const localVarFetchArgs = CompetitionAPIApiFetchParamCreator(configuration).getAllCompetitions(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Réorganisation des courses
         * @param {CompetitionReorganize} competitionReorganize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorganize(competitionReorganize: CompetitionReorganize, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CompetitionAPIApiFetchParamCreator(configuration).reorganize(competitionReorganize, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CompetitionAPIApi - factory interface
 * @export
 */
export const CompetitionAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * description
         * @summary Recherche d'une épreuve par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options?: any) {
            return CompetitionAPIApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Rechercher Toutes les compétitions 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCompetitions(options?: any) {
            return CompetitionAPIApiFp(configuration).getAllCompetitions(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Réorganisation des courses
         * @param {CompetitionReorganize} competitionReorganize 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorganize(competitionReorganize: CompetitionReorganize, options?: any) {
            return CompetitionAPIApiFp(configuration).reorganize(competitionReorganize, options)(fetch, basePath);
        },
    };
};

/**
 * CompetitionAPIApi - object-oriented interface
 * @export
 * @class CompetitionAPIApi
 * @extends {BaseAPI}
 */
export class CompetitionAPIApi extends BaseAPI {
    /**
     * description
     * @summary Recherche d'une épreuve par ID 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionAPIApi
     */
    public get(id: string, options?: any) {
        return CompetitionAPIApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Rechercher Toutes les compétitions 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionAPIApi
     */
    public getAllCompetitions(options?: any) {
        return CompetitionAPIApiFp(this.configuration).getAllCompetitions(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Réorganisation des courses
     * @param {CompetitionReorganize} competitionReorganize 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionAPIApi
     */
    public reorganize(competitionReorganize: CompetitionReorganize, options?: any) {
        return CompetitionAPIApiFp(this.configuration).reorganize(competitionReorganize, options)(this.fetch, this.basePath);
    }

}

/**
 * LicenceAPIApi - fetch parameter creator
 * @export
 */
export const LicenceAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete licence
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling _delete.');
            }
            const localVarPath = `/api/licences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Rechercher une licence par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/api/licences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Rechercher toutes les licences 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLicences(options: any = {}): FetchArgs {
            const localVarPath = `/api/licences`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Rechercher des licences en fonction, du nom, prénom ou numéro de licence 
         * @param {string} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicencesLike(param: string, options: any = {}): FetchArgs {
            // verify required parameter 'param' is not null or undefined
            if (param === null || param === undefined) {
                throw new RequiredError('param','Required parameter param was null or undefined when calling getLicencesLike.');
            }
            const localVarPath = `/api/licences/getLicencesLike/{param}`
                .replace(`{${"param"}}`, encodeURIComponent(String(param)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * currentPage, pageSize, orderDirection, orderBy et Filters
         * @summary Rechercher par page les licences 
         * @param {Search} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageSizeLicencesForPage(search: Search, options: any = {}): FetchArgs {
            // verify required parameter 'search' is not null or undefined
            if (search === null || search === undefined) {
                throw new RequiredError('search','Required parameter search was null or undefined when calling getPageSizeLicencesForPage.');
            }
            const localVarPath = `/api/licences/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Search" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(search || {}) : (search || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Modifie une licence existante 
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(licence: Licence, options: any = {}): FetchArgs {
            // verify required parameter 'licence' is not null or undefined
            if (licence === null || licence === undefined) {
                throw new RequiredError('licence','Required parameter licence was null or undefined when calling save.');
            }
            const localVarPath = `/api/licences`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Licence" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(licence || {}) : (licence || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update une licence existante
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(licence: Licence, options: any = {}): FetchArgs {
            // verify required parameter 'licence' is not null or undefined
            if (licence === null || licence === undefined) {
                throw new RequiredError('licence','Required parameter licence was null or undefined when calling update.');
            }
            const localVarPath = `/api/licences/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Licence" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(licence || {}) : (licence || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LicenceAPIApi - functional programming interface
 * @export
 */
export const LicenceAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete licence
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Rechercher une licence par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Rechercher toutes les licences 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLicences(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Licence>> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).getAllLicences(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Rechercher des licences en fonction, du nom, prénom ou numéro de licence 
         * @param {string} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicencesLike(param: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Licence>> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).getLicencesLike(param, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * currentPage, pageSize, orderDirection, orderBy et Filters
         * @summary Rechercher par page les licences 
         * @param {Search} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageSizeLicencesForPage(search: Search, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LicencesPage> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).getPageSizeLicencesForPage(search, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Modifie une licence existante 
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(licence: Licence, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).save(licence, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary update une licence existante
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(licence: Licence, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).update(licence, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LicenceAPIApi - factory interface
 * @export
 */
export const LicenceAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary delete licence
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any) {
            return LicenceAPIApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Rechercher une licence par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options?: any) {
            return LicenceAPIApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Rechercher toutes les licences 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLicences(options?: any) {
            return LicenceAPIApiFp(configuration).getAllLicences(options)(fetch, basePath);
        },
        /**
         * description
         * @summary Rechercher des licences en fonction, du nom, prénom ou numéro de licence 
         * @param {string} param 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicencesLike(param: string, options?: any) {
            return LicenceAPIApiFp(configuration).getLicencesLike(param, options)(fetch, basePath);
        },
        /**
         * currentPage, pageSize, orderDirection, orderBy et Filters
         * @summary Rechercher par page les licences 
         * @param {Search} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageSizeLicencesForPage(search: Search, options?: any) {
            return LicenceAPIApiFp(configuration).getPageSizeLicencesForPage(search, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Modifie une licence existante 
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save(licence: Licence, options?: any) {
            return LicenceAPIApiFp(configuration).save(licence, options)(fetch, basePath);
        },
        /**
         * 
         * @summary update une licence existante
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(licence: Licence, options?: any) {
            return LicenceAPIApiFp(configuration).update(licence, options)(fetch, basePath);
        },
    };
};

/**
 * LicenceAPIApi - object-oriented interface
 * @export
 * @class LicenceAPIApi
 * @extends {BaseAPI}
 */
export class LicenceAPIApi extends BaseAPI {
    /**
     * 
     * @summary delete licence
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public _delete(id: string, options?: any) {
        return LicenceAPIApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Rechercher une licence par ID 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public get(id: string, options?: any) {
        return LicenceAPIApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Rechercher toutes les licences 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public getAllLicences(options?: any) {
        return LicenceAPIApiFp(this.configuration).getAllLicences(options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Rechercher des licences en fonction, du nom, prénom ou numéro de licence 
     * @param {string} param 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public getLicencesLike(param: string, options?: any) {
        return LicenceAPIApiFp(this.configuration).getLicencesLike(param, options)(this.fetch, this.basePath);
    }

    /**
     * currentPage, pageSize, orderDirection, orderBy et Filters
     * @summary Rechercher par page les licences 
     * @param {Search} search 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public getPageSizeLicencesForPage(search: Search, options?: any) {
        return LicenceAPIApiFp(this.configuration).getPageSizeLicencesForPage(search, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Modifie une licence existante 
     * @param {Licence} licence 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public save(licence: Licence, options?: any) {
        return LicenceAPIApiFp(this.configuration).save(licence, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary update une licence existante
     * @param {Licence} licence 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public update(licence: Licence, options?: any) {
        return LicenceAPIApiFp(this.configuration).update(licence, options)(this.fetch, this.basePath);
    }

}

/**
 * RaceAPIApi - fetch parameter creator
 * @export
 */
export const RaceAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete race
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling _delete.');
            }
            const localVarPath = `/api/races/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Cree une nouvelle course 
         * @param {RaceCreate} raceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(raceCreate: RaceCreate, options: any = {}): FetchArgs {
            // verify required parameter 'raceCreate' is not null or undefined
            if (raceCreate === null || raceCreate === undefined) {
                throw new RequiredError('raceCreate','Required parameter raceCreate was null or undefined when calling create.');
            }
            const localVarPath = `/api/races`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RaceCreate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(raceCreate || {}) : (raceCreate || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Rechercher toutes les courses 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionRaces(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCompetitionRaces.');
            }
            const localVarPath = `/api/races/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Met à jour le classement du coureur 
         * @param {RaceRow} raceRow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(raceRow: RaceRow, options: any = {}): FetchArgs {
            // verify required parameter 'raceRow' is not null or undefined
            if (raceRow === null || raceRow === undefined) {
                throw new RequiredError('raceRow','Required parameter raceRow was null or undefined when calling update.');
            }
            const localVarPath = `/api/races/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RaceRow" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(raceRow || {}) : (raceRow || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RaceAPIApi - functional programming interface
 * @export
 */
export const RaceAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete race
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RaceAPIApiFetchParamCreator(configuration)._delete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Cree une nouvelle course 
         * @param {RaceCreate} raceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(raceCreate: RaceCreate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RaceAPIApiFetchParamCreator(configuration).create(raceCreate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Rechercher toutes les courses 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionRaces(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RaceRow>> {
            const localVarFetchArgs = RaceAPIApiFetchParamCreator(configuration).getCompetitionRaces(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Met à jour le classement du coureur 
         * @param {RaceRow} raceRow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(raceRow: RaceRow, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RaceAPIApiFetchParamCreator(configuration).update(raceRow, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RaceAPIApi - factory interface
 * @export
 */
export const RaceAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary delete race
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any) {
            return RaceAPIApiFp(configuration)._delete(id, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Cree une nouvelle course 
         * @param {RaceCreate} raceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(raceCreate: RaceCreate, options?: any) {
            return RaceAPIApiFp(configuration).create(raceCreate, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Rechercher toutes les courses 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionRaces(id: number, options?: any) {
            return RaceAPIApiFp(configuration).getCompetitionRaces(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Met à jour le classement du coureur 
         * @param {RaceRow} raceRow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(raceRow: RaceRow, options?: any) {
            return RaceAPIApiFp(configuration).update(raceRow, options)(fetch, basePath);
        },
    };
};

/**
 * RaceAPIApi - object-oriented interface
 * @export
 * @class RaceAPIApi
 * @extends {BaseAPI}
 */
export class RaceAPIApi extends BaseAPI {
    /**
     * 
     * @summary delete race
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaceAPIApi
     */
    public _delete(id: string, options?: any) {
        return RaceAPIApiFp(this.configuration)._delete(id, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Cree une nouvelle course 
     * @param {RaceCreate} raceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaceAPIApi
     */
    public create(raceCreate: RaceCreate, options?: any) {
        return RaceAPIApiFp(this.configuration).create(raceCreate, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Rechercher toutes les courses 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaceAPIApi
     */
    public getCompetitionRaces(id: number, options?: any) {
        return RaceAPIApiFp(this.configuration).getCompetitionRaces(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Met à jour le classement du coureur 
     * @param {RaceRow} raceRow 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaceAPIApi
     */
    public update(raceRow: RaceRow, options?: any) {
        return RaceAPIApiFp(this.configuration).update(raceRow, options)(this.fetch, this.basePath);
    }

}

/**
 * SecurityApi - fetch parameter creator
 * @export
 */
export const SecurityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Login utilisateur
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: User, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling login.');
            }
            const localVarPath = `/api/security/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (user || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Login utilisateur
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = SecurityApiFetchParamCreator(configuration).login(user, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * description
         * @summary Login utilisateur
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: User, options?: any) {
            return SecurityApiFp(configuration).login(user, options)(fetch, basePath);
        },
    };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
    /**
     * description
     * @summary Login utilisateur
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public login(user: User, options?: any) {
        return SecurityApiFp(this.configuration).login(user, options)(this.fetch, this.basePath);
    }

}

