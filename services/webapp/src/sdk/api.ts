/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Click And Dossard API V2
 * Documentation de l'API Click And Dossard API description
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Licence
 */
export interface Licence {
    /**
     * 
     * @type {number}
     * @memberof Licence
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    licenceNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    gender: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    club: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    dept: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    birthYear: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    catea: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    catev: string;
    /**
     * 
     * @type {string}
     * @memberof Licence
     */
    fede: string;
}

/**
 * 
 * @export
 * @interface RaceCreate
 */
export interface RaceCreate {
    /**
     * 
     * @type {number}
     * @memberof RaceCreate
     */
    competitionId?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceCreate
     */
    licenceNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof RaceCreate
     */
    riderNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceCreate
     */
    raceCode?: string;
}

/**
 * 
 * @export
 * @interface RaceRow
 */
export interface RaceRow {
    /**
     * 
     * @type {number}
     * @memberof RaceRow
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    raceCode?: string;
    /**
     * 
     * @type {number}
     * @memberof RaceRow
     */
    riderNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof RaceRow
     */
    numberMin?: number;
    /**
     * 
     * @type {number}
     * @memberof RaceRow
     */
    numberMax?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RaceRow
     */
    surclassed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    licenceNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    club?: string;
    /**
     * 
     * @type {string}
     * @memberof RaceRow
     */
    birthYear?: string;
}

/**
 * 
 * @export
 * @interface RaceUpdate
 */
export interface RaceUpdate {
    /**
     * 
     * @type {number}
     * @memberof RaceUpdate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceUpdate
     */
    licenceNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof RaceUpdate
     */
    riderNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof RaceUpdate
     */
    raceCode?: string;
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
}


/**
 * LicenceAPIApi - fetch parameter creator
 * @export
 */
export const LicenceAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Rechercher une licence par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/api/licences/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Rechercher toutes les licences 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLicences(options: any = {}): FetchArgs {
            const localVarPath = `/api/licences`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * currentPage, pageSize, orderDirection, orderBy et Filters
         * @summary Rechercher par page les licences 
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageSizeLicencesForPage(licence: Licence, options: any = {}): FetchArgs {
            // verify required parameter 'licence' is not null or undefined
            if (licence === null || licence === undefined) {
                throw new RequiredError('licence','Required parameter licence was null or undefined when calling getPageSizeLicencesForPage.');
            }
            const localVarPath = `/api/licences`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Licence" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(licence || {}) : (licence || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LicenceAPIApi - functional programming interface
 * @export
 */
export const LicenceAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Rechercher une licence par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).get(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Rechercher toutes les licences 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLicences(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Licence>> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).getAllLicences(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * currentPage, pageSize, orderDirection, orderBy et Filters
         * @summary Rechercher par page les licences 
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageSizeLicencesForPage(licence: Licence, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicenceAPIApiFetchParamCreator(configuration).getPageSizeLicencesForPage(licence, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LicenceAPIApi - factory interface
 * @export
 */
export const LicenceAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * description
         * @summary Rechercher une licence par ID 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: string, options?: any) {
            return LicenceAPIApiFp(configuration).get(id, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Rechercher toutes les licences 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLicences(options?: any) {
            return LicenceAPIApiFp(configuration).getAllLicences(options)(fetch, basePath);
        },
        /**
         * currentPage, pageSize, orderDirection, orderBy et Filters
         * @summary Rechercher par page les licences 
         * @param {Licence} licence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageSizeLicencesForPage(licence: Licence, options?: any) {
            return LicenceAPIApiFp(configuration).getPageSizeLicencesForPage(licence, options)(fetch, basePath);
        },
    };
};

/**
 * LicenceAPIApi - object-oriented interface
 * @export
 * @class LicenceAPIApi
 * @extends {BaseAPI}
 */
export class LicenceAPIApi extends BaseAPI {
    /**
     * description
     * @summary Rechercher une licence par ID 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public get(id: string, options?: any) {
        return LicenceAPIApiFp(this.configuration).get(id, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Rechercher toutes les licences 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public getAllLicences(options?: any) {
        return LicenceAPIApiFp(this.configuration).getAllLicences(options)(this.fetch, this.basePath);
    }

    /**
     * currentPage, pageSize, orderDirection, orderBy et Filters
     * @summary Rechercher par page les licences 
     * @param {Licence} licence 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicenceAPIApi
     */
    public getPageSizeLicencesForPage(licence: Licence, options?: any) {
        return LicenceAPIApiFp(this.configuration).getPageSizeLicencesForPage(licence, options)(this.fetch, this.basePath);
    }

}

/**
 * RaceAPIApi - fetch parameter creator
 * @export
 */
export const RaceAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Cree une nouvelle course 
         * @param {RaceCreate} raceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(raceCreate: RaceCreate, options: any = {}): FetchArgs {
            // verify required parameter 'raceCreate' is not null or undefined
            if (raceCreate === null || raceCreate === undefined) {
                throw new RequiredError('raceCreate','Required parameter raceCreate was null or undefined when calling create.');
            }
            const localVarPath = `/api/races`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RaceCreate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(raceCreate || {}) : (raceCreate || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Rechercher toutes les courses 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRaces(options: any = {}): FetchArgs {
            const localVarPath = `/api/races`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * description
         * @summary Mets à jour une course existante 
         * @param {RaceUpdate} raceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(raceUpdate: RaceUpdate, options: any = {}): FetchArgs {
            // verify required parameter 'raceUpdate' is not null or undefined
            if (raceUpdate === null || raceUpdate === undefined) {
                throw new RequiredError('raceUpdate','Required parameter raceUpdate was null or undefined when calling update.');
            }
            const localVarPath = `/api/races`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RaceUpdate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(raceUpdate || {}) : (raceUpdate || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RaceAPIApi - functional programming interface
 * @export
 */
export const RaceAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Cree une nouvelle course 
         * @param {RaceCreate} raceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(raceCreate: RaceCreate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RaceAPIApiFetchParamCreator(configuration).create(raceCreate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Rechercher toutes les courses 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRaces(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RaceRow>> {
            const localVarFetchArgs = RaceAPIApiFetchParamCreator(configuration).getAllRaces(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * description
         * @summary Mets à jour une course existante 
         * @param {RaceUpdate} raceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(raceUpdate: RaceUpdate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RaceAPIApiFetchParamCreator(configuration).update(raceUpdate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RaceAPIApi - factory interface
 * @export
 */
export const RaceAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * description
         * @summary Cree une nouvelle course 
         * @param {RaceCreate} raceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(raceCreate: RaceCreate, options?: any) {
            return RaceAPIApiFp(configuration).create(raceCreate, options)(fetch, basePath);
        },
        /**
         * description
         * @summary Rechercher toutes les courses 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRaces(options?: any) {
            return RaceAPIApiFp(configuration).getAllRaces(options)(fetch, basePath);
        },
        /**
         * description
         * @summary Mets à jour une course existante 
         * @param {RaceUpdate} raceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(raceUpdate: RaceUpdate, options?: any) {
            return RaceAPIApiFp(configuration).update(raceUpdate, options)(fetch, basePath);
        },
    };
};

/**
 * RaceAPIApi - object-oriented interface
 * @export
 * @class RaceAPIApi
 * @extends {BaseAPI}
 */
export class RaceAPIApi extends BaseAPI {
    /**
     * description
     * @summary Cree une nouvelle course 
     * @param {RaceCreate} raceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaceAPIApi
     */
    public create(raceCreate: RaceCreate, options?: any) {
        return RaceAPIApiFp(this.configuration).create(raceCreate, options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Rechercher toutes les courses 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaceAPIApi
     */
    public getAllRaces(options?: any) {
        return RaceAPIApiFp(this.configuration).getAllRaces(options)(this.fetch, this.basePath);
    }

    /**
     * description
     * @summary Mets à jour une course existante 
     * @param {RaceUpdate} raceUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RaceAPIApi
     */
    public update(raceUpdate: RaceUpdate, options?: any) {
        return RaceAPIApiFp(this.configuration).update(raceUpdate, options)(this.fetch, this.basePath);
    }

}

/**
 * SecurityApi - fetch parameter creator
 * @export
 */
export const SecurityApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Login utilisateur
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: User, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling login.');
            }
            const localVarPath = `/api/security/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(user || {}) : (user || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    return {
        /**
         * description
         * @summary Login utilisateur
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: User, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = SecurityApiFetchParamCreator(configuration).login(user, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * description
         * @summary Login utilisateur
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: User, options?: any) {
            return SecurityApiFp(configuration).login(user, options)(fetch, basePath);
        },
    };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
    /**
     * description
     * @summary Login utilisateur
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public login(user: User, options?: any) {
        return SecurityApiFp(this.configuration).login(user, options)(this.fetch, this.basePath);
    }

}

