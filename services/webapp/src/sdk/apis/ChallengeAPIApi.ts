/* tslint:disable */
/* eslint-disable */
/**
 * Open Dossard
 * Documentation de l\'API Open Dossard
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@opendossard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChallengeDTO,
    ChallengeDTOFromJSON,
    ChallengeDTOToJSON,
    ChallengeRider,
    ChallengeRiderFromJSON,
    ChallengeRiderToJSON,
} from '../models';

export interface CalculChallengeRequest {
    id: number;
}

export interface GetChallengeByIdRequest {
    id: number;
}

/**
 * no description
 */
export class ChallengeAPIApi extends runtime.BaseAPI {

    /**
     * Calculer les challenges 
     */
    async calculChallengeRaw(requestParameters: CalculChallengeRequest): Promise<runtime.ApiResponse<Array<ChallengeRider>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling calculChallenge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/challenge/calcul/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChallengeRiderFromJSON));
    }

    /**
     * Calculer les challenges 
     */
    async calculChallenge(requestParameters: CalculChallengeRequest): Promise<Array<ChallengeRider>> {
        const response = await this.calculChallengeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Renvoie la liste de tous les challenges
     * Rechercher tous les challenges
     */
    async getAllChallengesRaw(): Promise<runtime.ApiResponse<Array<ChallengeDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/challenge/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChallengeDTOFromJSON));
    }

    /**
     * Renvoie la liste de tous les challenges
     * Rechercher tous les challenges
     */
    async getAllChallenges(): Promise<Array<ChallengeDTO>> {
        const response = await this.getAllChallengesRaw();
        return await response.value();
    }

    /**
     * Renvoie un challenge par son id
     * Rechercher un challenge par son id
     */
    async getChallengeByIdRaw(requestParameters: GetChallengeByIdRequest): Promise<runtime.ApiResponse<ChallengeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChallengeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/challenge/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeDTOFromJSON(jsonValue));
    }

    /**
     * Renvoie un challenge par son id
     * Rechercher un challenge par son id
     */
    async getChallengeById(requestParameters: GetChallengeByIdRequest): Promise<ChallengeDTO> {
        const response = await this.getChallengeByIdRaw(requestParameters);
        return await response.value();
    }

}
