/* tslint:disable */
/* eslint-disable */
/**
 * Open Dossard
 * Documentation de l\'API Open Dossard
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@opendossard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UserEntity,
    UserEntityFromJSON,
    UserEntityToJSON,
} from '../models';

export interface LoginRequest {
    userEntity: UserEntity;
}

/**
 * no description
 */
export class AuthAPIApi extends runtime.BaseAPI {

    /**
     * description
     * Login utilisateur
     */
    async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.userEntity === null || requestParameters.userEntity === undefined) {
            throw new runtime.RequiredError('userEntity','Required parameter requestParameters.userEntity was null or undefined when calling login.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserEntityToJSON(requestParameters.userEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * description
     * Login utilisateur
     */
    async login(requestParameters: LoginRequest): Promise<UserEntity> {
        const response = await this.loginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Renvoie l\'identifiant courant
     * identifiant courant
     */
    async meRaw(): Promise<runtime.ApiResponse<UserEntity>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     * Renvoie l\'identifiant courant
     * identifiant courant
     */
    async me(): Promise<UserEntity> {
        const response = await this.meRaw();
        return await response.value();
    }

}
