/* tslint:disable */
/* eslint-disable */
/**
 * Open Dossard
 * Documentation de l\'API Open Dossard
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@opendossard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LicenceEntity,
    LicenceEntityFromJSON,
    LicenceEntityToJSON,
    LicencesPage,
    LicencesPageFromJSON,
    LicencesPageToJSON,
    Search,
    SearchFromJSON,
    SearchToJSON,
} from '../models';

export interface DeleteRequest {
    id: string;
}

export interface CreateRequest {
    licenceEntity: LicenceEntity;
}

export interface GetRequest {
    id: string;
}

export interface GetLicencesLikeRequest {
    param: string;
    competitionType: string;
}

export interface GetPageSizeLicencesForPageRequest {
    search: Search;
}

export interface UpdateRequest {
    licenceEntity: LicenceEntity;
}

/**
 * no description
 */
export class LicenceAPIApi extends runtime.BaseAPI {

    /**
     * Supprime une licence
     */
    async _deleteRaw(requestParameters: DeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _delete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprime une licence
     */
    async _delete(requestParameters: DeleteRequest): Promise<void> {
        await this._deleteRaw(requestParameters);
    }

    /**
     * Cree une nouvelle licence
     */
    async createRaw(requestParameters: CreateRequest): Promise<runtime.ApiResponse<LicenceEntity>> {
        if (requestParameters.licenceEntity === null || requestParameters.licenceEntity === undefined) {
            throw new runtime.RequiredError('licenceEntity','Required parameter requestParameters.licenceEntity was null or undefined when calling create.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LicenceEntityToJSON(requestParameters.licenceEntity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenceEntityFromJSON(jsonValue));
    }

    /**
     * Cree une nouvelle licence
     */
    async create(requestParameters: CreateRequest): Promise<LicenceEntity> {
        const response = await this.createRaw(requestParameters);
        return await response.value();
    }

    /**
     * Recherche une licence par son identifiant
     * Rechercher une licence par ID 
     */
    async getRaw(requestParameters: GetRequest): Promise<runtime.ApiResponse<LicenceEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling get.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenceEntityFromJSON(jsonValue));
    }

    /**
     * Recherche une licence par son identifiant
     * Rechercher une licence par ID 
     */
    async get(requestParameters: GetRequest): Promise<LicenceEntity> {
        const response = await this.getRaw(requestParameters);
        return await response.value();
    }

    /**
     * Renvoie toutes les licences
     * Rechercher toutes les licences 
     */
    async getAllLicencesRaw(): Promise<runtime.ApiResponse<Array<LicenceEntity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LicenceEntityFromJSON));
    }

    /**
     * Renvoie toutes les licences
     * Rechercher toutes les licences 
     */
    async getAllLicences(): Promise<Array<LicenceEntity>> {
        const response = await this.getAllLicencesRaw();
        return await response.value();
    }

    /**
     * Rechercher des licences en fonction, du nom, prénom ou numéro de licence 
     * Recherche des licences
     */
    async getLicencesLikeRaw(requestParameters: GetLicencesLikeRequest): Promise<runtime.ApiResponse<Array<LicenceEntity>>> {
        if (requestParameters.param === null || requestParameters.param === undefined) {
            throw new runtime.RequiredError('param','Required parameter requestParameters.param was null or undefined when calling getLicencesLike.');
        }

        if (requestParameters.competitionType === null || requestParameters.competitionType === undefined) {
            throw new runtime.RequiredError('competitionType','Required parameter requestParameters.competitionType was null or undefined when calling getLicencesLike.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences/search/{param}/{competitionType}`.replace(`{${"param"}}`, encodeURIComponent(String(requestParameters.param))).replace(`{${"competitionType"}}`, encodeURIComponent(String(requestParameters.competitionType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LicenceEntityFromJSON));
    }

    /**
     * Rechercher des licences en fonction, du nom, prénom ou numéro de licence 
     * Recherche des licences
     */
    async getLicencesLike(requestParameters: GetLicencesLikeRequest): Promise<Array<LicenceEntity>> {
        const response = await this.getLicencesLikeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Recherche paginée utilisant currentPage, pageSize, orderDirection, orderBy et Filters
     * Rechercher par page les licences 
     */
    async getPageSizeLicencesForPageRaw(requestParameters: GetPageSizeLicencesForPageRequest): Promise<runtime.ApiResponse<LicencesPage>> {
        if (requestParameters.search === null || requestParameters.search === undefined) {
            throw new runtime.RequiredError('search','Required parameter requestParameters.search was null or undefined when calling getPageSizeLicencesForPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchToJSON(requestParameters.search),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicencesPageFromJSON(jsonValue));
    }

    /**
     * Recherche paginée utilisant currentPage, pageSize, orderDirection, orderBy et Filters
     * Rechercher par page les licences 
     */
    async getPageSizeLicencesForPage(requestParameters: GetPageSizeLicencesForPageRequest): Promise<LicencesPage> {
        const response = await this.getPageSizeLicencesForPageRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async licenceControllerUploadFileRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences/upload/elicence`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async licenceControllerUploadFile(): Promise<string> {
        const response = await this.licenceControllerUploadFileRaw();
        return await response.value();
    }

    /**
     * Met à jour une licence existante
     */
    async updateRaw(requestParameters: UpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.licenceEntity === null || requestParameters.licenceEntity === undefined) {
            throw new runtime.RequiredError('licenceEntity','Required parameter requestParameters.licenceEntity was null or undefined when calling update.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/licences`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LicenceEntityToJSON(requestParameters.licenceEntity),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Met à jour une licence existante
     */
    async update(requestParameters: UpdateRequest): Promise<void> {
        await this.updateRaw(requestParameters);
    }

}
