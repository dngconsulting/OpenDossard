/* tslint:disable */
/* eslint-disable */
/**
 * Open Dossard
 * Documentation de l\'API Open Dossard
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@opendossard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CompetitionFilter,
    CompetitionFilterFromJSON,
    CompetitionFilterToJSON,
    RaceCreate,
    RaceCreateFromJSON,
    RaceCreateToJSON,
    RaceNbRider,
    RaceNbRiderFromJSON,
    RaceNbRiderToJSON,
    RaceRow,
    RaceRowFromJSON,
    RaceRowToJSON,
} from '../models';

export interface DeleteRaceRequest {
    id: string;
}

export interface EngageRequest {
    raceCreate: RaceCreate;
}

export interface FlagChallengeRequest {
    raceRow: RaceRow;
}

export interface GetCompetitionRacesRequest {
    id: number;
}

export interface GetPalmaresRequest {
    id: number;
}

export interface GetRacesRequest {
    competitionFilter: CompetitionFilter;
}

export interface RemoveRankingRequest {
    raceRow: RaceRow;
}

export interface ReorderRankingRequest {
    raceRow: Array<RaceRow>;
}

export interface UpdateRankingRequest {
    raceRow: RaceRow;
}

/**
 * no description
 */
export class RaceAPIApi extends runtime.BaseAPI {

    /**
     * Supprime une course
     */
    async deleteRaceRaw(requestParameters: DeleteRaceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprime une course
     */
    async deleteRace(requestParameters: DeleteRaceRequest): Promise<void> {
        await this.deleteRaceRaw(requestParameters);
    }

    /**
     * Engage un nouveau coureur 
     */
    async engageRaw(requestParameters: EngageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.raceCreate === null || requestParameters.raceCreate === undefined) {
            throw new runtime.RequiredError('raceCreate','Required parameter requestParameters.raceCreate was null or undefined when calling engage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RaceCreateToJSON(requestParameters.raceCreate),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Engage un nouveau coureur 
     */
    async engage(requestParameters: EngageRequest): Promise<void> {
        await this.engageRaw(requestParameters);
    }

    /**
     * Classe le vainqueur du challenge
     */
    async flagChallengeRaw(requestParameters: FlagChallengeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.raceRow === null || requestParameters.raceRow === undefined) {
            throw new runtime.RequiredError('raceRow','Required parameter requestParameters.raceRow was null or undefined when calling flagChallenge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/flagChallenge`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RaceRowToJSON(requestParameters.raceRow),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Classe le vainqueur du challenge
     */
    async flagChallenge(requestParameters: FlagChallengeRequest): Promise<void> {
        await this.flagChallengeRaw(requestParameters);
    }

    /**
     * Rechercher tous les coureurs participants à une course 
     */
    async getCompetitionRacesRaw(requestParameters: GetCompetitionRacesRequest): Promise<runtime.ApiResponse<Array<RaceRow>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCompetitionRaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RaceRowFromJSON));
    }

    /**
     * Rechercher tous les coureurs participants à une course 
     */
    async getCompetitionRaces(requestParameters: GetCompetitionRacesRequest): Promise<Array<RaceRow>> {
        const response = await this.getCompetitionRacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Rechercher le nombre de coureur par course 
     */
    async getNumberRiderRaw(): Promise<runtime.ApiResponse<Array<RaceNbRider>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/nbRider`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RaceNbRiderFromJSON));
    }

    /**
     * Rechercher le nombre de coureur par course 
     */
    async getNumberRider(): Promise<Array<RaceNbRider>> {
        const response = await this.getNumberRiderRaw();
        return await response.value();
    }

    /**
     * Rechercher le palmares d\'un coureur par son id coureur
     */
    async getPalmaresRaw(requestParameters: GetPalmaresRequest): Promise<runtime.ApiResponse<Array<RaceRow>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPalmares.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/palmares/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RaceRowFromJSON));
    }

    /**
     * Rechercher le palmares d\'un coureur par son id coureur
     */
    async getPalmares(requestParameters: GetPalmaresRequest): Promise<Array<RaceRow>> {
        const response = await this.getPalmaresRaw(requestParameters);
        return await response.value();
    }

    /**
     * Rechercher les participations aux courses de MM/JJ/AAAA à MM/JJ/AAAA
     */
    async getRacesRaw(requestParameters: GetRacesRequest): Promise<runtime.ApiResponse<Array<RaceRow>>> {
        if (requestParameters.competitionFilter === null || requestParameters.competitionFilter === undefined) {
            throw new runtime.RequiredError('competitionFilter','Required parameter requestParameters.competitionFilter was null or undefined when calling getRaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/getRaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionFilterToJSON(requestParameters.competitionFilter),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RaceRowFromJSON));
    }

    /**
     * Rechercher les participations aux courses de MM/JJ/AAAA à MM/JJ/AAAA
     */
    async getRaces(requestParameters: GetRacesRequest): Promise<Array<RaceRow>> {
        const response = await this.getRacesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Supprime un coureur du classement
     */
    async removeRankingRaw(requestParameters: RemoveRankingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.raceRow === null || requestParameters.raceRow === undefined) {
            throw new runtime.RequiredError('raceRow','Required parameter requestParameters.raceRow was null or undefined when calling removeRanking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/removeRanking`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RaceRowToJSON(requestParameters.raceRow),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Supprime un coureur du classement
     */
    async removeRanking(requestParameters: RemoveRankingRequest): Promise<void> {
        await this.removeRankingRaw(requestParameters);
    }

    /**
     * Réordonne le classement
     */
    async reorderRankingRaw(requestParameters: ReorderRankingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.raceRow === null || requestParameters.raceRow === undefined) {
            throw new runtime.RequiredError('raceRow','Required parameter requestParameters.raceRow was null or undefined when calling reorderRanking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/reorderRank`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.raceRow.map(RaceRowToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Réordonne le classement
     */
    async reorderRanking(requestParameters: ReorderRankingRequest): Promise<void> {
        await this.reorderRankingRaw(requestParameters);
    }

    /**
     * Met à jour le classement du coureur 
     */
    async updateRankingRaw(requestParameters: UpdateRankingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.raceRow === null || requestParameters.raceRow === undefined) {
            throw new runtime.RequiredError('raceRow','Required parameter requestParameters.raceRow was null or undefined when calling updateRanking.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/races/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RaceRowToJSON(requestParameters.raceRow),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Met à jour le classement du coureur 
     */
    async updateRanking(requestParameters: UpdateRankingRequest): Promise<void> {
        await this.updateRankingRaw(requestParameters);
    }

}
